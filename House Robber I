O(N)

class Solution {
    public int rob(int[] nums) {
       if(nums.length == 0) {
            return 0;
        }

        if(nums.length == 1) {
            return nums[0];
        }
        
        int[] dp = new int[nums.length];
        
        dp[0] = nums[0];
        dp[1] = nums[0] > nums[1] ? nums[0] : nums[1];

        for(int i = 2; i < nums.length; i++) {
            dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        
        return dp[dp.length - 1];
    }
}



---------------------------------------

class Solution {
    public int rob(int[] nums) {
       if(nums.length == 0) {
            return 0;
        }

        if(nums.length == 1) {
            return nums[0];
        }
        
        int[] dp = new int[nums.length];
        
        dp[0] = nums[0];
        dp[1] = nums[1];
        dp[2]= dp[0] + dp[2];
        int max= Math.max(dp[1], dp[2]);
        
        for(int i = 3; i < nums.length; i++) {
            dp[i] = Math.max(dp[i - 2] + nums[i-3]), nums[i];
            max= Math.max(dp[i], max);
        }
        
        return max;
    }
}


---------------------------
O(1)

class Solution {
    public int rob(int[] nums) {
       int rob1=0;
        int rob2=0;
        
        // [rob1, rob2, n, n+1]
        for(int num: nums){
            int temp= Math.max(rob1 + num, rob2);
            rob1= rob2;
            rob2= temp;
        }
        
        return rob2;
        
    }
}
