class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // O(1) time
        if (k == nums.length) {
            return nums;
        }
        
        // 1. build hash map : character and how often it appears
        // O(N) time
        Map<Integer, Integer> count = new HashMap();
        for (int n: nums) {
          count.put(n, count.getOrDefault(n, 0) + 1);
        }

        // init heap 'the less frequent element first'
        Queue<Integer> heap = new PriorityQueue<>(
            (n1, n2) -> count.get(n1) - count.get(n2));

        // 2. keep k top frequent elements in the heap
        // O(N log k) < O(N log N) time
        for (int n: count.keySet()) {
          heap.add(n);
          if (heap.size() > k) heap.poll();    
        }

        // 3. build an output array
        // O(k log k) time
        int[] top = new int[k];
        for(int i = k - 1; i >= 0; --i) {
            top[i] = heap.poll();
        }
        return top;
    }
}


-------------------------------------------

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        if(k == nums.length){
            return nums;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int num : nums){
            map.put(num, map.getOrDefault(num,0) + 1);
        }
        
        List<Integer>[] buckets = new ArrayList[nums.length +1];
        for(int i=0; i < buckets.length; i++){
            buckets[i] = new ArrayList<>();
        }
        
        for(int key : map.keySet()){
            buckets[map.get(key)].add(key);
        }
        
        List<Integer> result = new ArrayList<>();
        for(int i = buckets.length -1; i >= 0; i--){
            for(int num : buckets[i]){
                result.add(num);
            }
        }
        
        int[] top = new int[k];
        for(int i =0; i<k; i++){
            top[i] = result.get(i);
        }
        
        return top;
    }
}



