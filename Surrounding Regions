class Solution {
    public void solve(char[][] board) {
        if(board.length == 0 || board[0].length == 0)
            return;
        
        int rows= board.length;
        int columns= board[0].length;
        
        // check for boundary conditions at first and last column
        for(int i=0; i< rows; i++){
            if(board[i][0] == '0' )
                boundaryColumns(board, i, 0);
            
            if(board[i][columns-1] == '0')
                boundaryColumns(board, i, columns-1);
        }
        
        //check for boundary conditions at first and last row
        for(int j=0; j< columns; j++){
            if(board[0][j] == '0' )
                boundaryColumns(board, 0, j);
                
             if(board[rows-1][j] == '0')
                boundaryColumns(board, rows-1, j);
        }
        
        for(int i=0; i< rows; i++){
            for(int j=0; j< columns; j++){
                if(board[i][j] == '0'){
                    board[i][j] = 'X';
                }else if(board[i][j] == '*'){
                    board[i][j] ='0';
                }
            }
        }
        
    }
    
    public void boundaryColumns(char[][] board, int i, int j){
        if(i > board.length-1 || j > board[0].length || i < 0 || j < 0){
            return;
        }
        
        if(board[i][j] == '0'){
            board[i][j] = '*';
        }
        
        if(i > 0 && board[i-1][j] == '0'){
            boundaryColumns(board, i-1, j);
        }
        
        if(i < board.length-1 && board[i+1][j] == '0'){
            boundaryColumns(board, i+1, j);
        }
        
        if(j > 0 && board[i][j-1] == '0'){
            boundaryColumns(board, i, j-1);
        }
        
        if(j < board[0].length-1 && board[i][j+1] == '0'){
            boundaryColumns(board, i, j+1);
        }

        return;
    } 
    
}
