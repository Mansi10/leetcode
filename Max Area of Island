class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int maxArea =0;
        
        for(int i=0; i<grid.length;i++){
            for(int j=0; j< grid[0].length;j++){
                if(grid[i][j] == 1){
                    maxArea = Math.max(maxArea, checkdfs(grid, i, j));
                }
            }
        }
        return maxArea;
    }
    
    public int checkdfs(int[][] grid, int i, int j){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] <= 0){
            return 0;
        }
        
        grid[i][j] = -1;
        int topArea = checkdfs(grid, i-1, j);
        int downArea = checkdfs(grid, i+1, j);
        int leftArea = checkdfs(grid, i, j-1);
        int rightArea = checkdfs(grid, i, j+1);
        
        int totalArea = 1 + topArea + downArea + leftArea + rightArea;
        
        return totalArea;
    }
    
}
