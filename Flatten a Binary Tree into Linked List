//TC-O(n)
//SC-O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        
        if(root == null)
            return;
        
        // check stack top, then push right node, then left, then connect top of stack to right child of the node, make left child as null
        stack.push(root);
        
        while(! stack.isEmpty()){
            TreeNode curr= stack.peek();
            stack.pop();
            
            if(curr.right != null)
                stack.push(curr.right);
            
             if(curr.left != null)
                stack.push(curr.left);
            
            if(! stack.isEmpty()){
                curr.right= stack.peek();
                curr.left= null;
            }
            
        }        
    }
}

-------------------------------------
// TC - O(N) 
// SC - O(1) 
class Solution {
    public void flatten(TreeNode root) {
        TreeNode cur = root;
		while (cur != null)
		{
			if(cur.left != null)
			{
				TreeNode pre = cur.left;
				while(pre.right != null)
				{
					pre = pre.right;
				}
				pre.right = cur.right;
				cur.right = cur.left;
				cur.left = null;
			}
			cur = cur.right;
		}
    }
}




