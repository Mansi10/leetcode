/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 
 // top-down dfs preorder traversal
 
class Solution {
    public int longestConsecutive(TreeNode root) {
        return dfs(root, null, 0);
    }
    
    private int dfs(TreeNode root, TreeNode parent, int length){
        if(root == null){
            return length;
        }
        
        length = (parent != null && root.val == parent.val+1) ? length + 1: 1;
        return Math.max(length, Math.max(dfs(root.left, root, length), dfs(root.right, root, length)));
        
    }
    
}



--------------------

// bottom-up dfs postorder traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int maxLength =0;
    
    public int longestConsecutive(TreeNode root) {
         dfs(root);
        return maxLength;
    }
    
    private int dfs(TreeNode root){
        if(root == null){
            return 0;
        }
        
       int L = dfs(root.left) + 1;
        int R = dfs(root.right) + 1;
        
        if(root.left != null && root.val + 1 != root.left.val){
            L =1;
        }
        
         if(root.right != null && root.val + 1 != root.right.val){
            R =1;
        }
        
        int length = Math.max(L, R);
        
        maxLength = Math.max(maxLength, length);
        
        return length;
    }
    
}



