class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        
        if(s.length() ==0 || s== null)
            return result;
        
        helper(s, result, new ArrayList<>());
        
        return result;
    }
    
    public void helper(String s, List<List<String>> result, List<String> currList){
        if(s.length() == 0){
            result.add(new ArrayList<>(currList));
        }
        
        for(int i=0; i< s.length(); i++){
            String firstPart = s.substring(0, i+1);
            if(isPalindrome(firstPart)){
                currList.add(firstPart);
                String secondString = s.substring(i+1, s.length());
                helper(secondString, result, currList);
                currList.remove(currList.size()-1);
            }
        }
        
    }
    
    public boolean isPalindrome(String s){
        String reversedString = new StringBuilder(s).reverse().toString();
        
        return s.equals(reversedString);
    }

}
