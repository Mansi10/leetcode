// TC-O(N)
// SC-O(N)

class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<>();
        
        if(s == null || s.length() < 2){
            return 0;
        }
        
        for(int i=0; i < s.length(); i++){
             if(s.charAt(i) == '('){
                 stack.push(i);
             }
            else{
                // if the current element is a closing bracket, indicating a valid balanced case 
                if(!stack.isEmpty() && s.charAt(stack.peek()) == '('){
                    stack.pop();
                }
                else{
                    // unbalanced case
                    stack.push(i);
                }
            }
        }
        
        int maxLen = 0;
        int endIndex = s.length();
        
        while(!stack.isEmpty()){
            int startIndex = stack.pop();
            maxLen = Math.max(maxLen, endIndex - startIndex - 1); // lets say, stack conatins 4, 7, 10, then 10 - 7 =3, however 3 elements doesn't exist between these two indexes
            endIndex = startIndex;
        }
    
        return Math.max(endIndex, maxLen); // in case there exists a balanced string from index 0
        
    }
}

-----------------------------------------------------------

// TC -O(N)
// SC - O(1)

class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<>();
        int maxLength = 0;
        
        int left = 0, right = 0;
        
        for(int i =0; i < s.length(); i++){
            if(s.charAt(i) == '('){
                left++;
            }
            else{
                right++;
            }
            
            if(left == right){
                maxLength = Math.max(maxLength, left + right);
            }
            else if(right >= left){
                left = right = 0;
            }
        }
        
        
         left = 0;
        right = 0;
        
        for(int i = s.length() - 1; i >= 0; i--){
            if(s.charAt(i) == '('){
                left++;
            }
            else{
                right++;
            }
            
            if(left == right){
                maxLength = Math.max(maxLength, left + right);
            }
            else if(left >= right){
                left = right = 0;
            }
        }
        
        
        return maxLength;
               
    }
}



