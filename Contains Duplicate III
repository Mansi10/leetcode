class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        TreeSet<Integer> set = new TreeSet<>();
        
        for(int i=0;i<nums.length;i++){ // O(n)
            
            Integer ceil = set.ceiling(nums[i]); // next higher value O(log k) in treeset
            
            if(ceil != null && (long)ceil-nums[i] <= t){
                return true;
            }
            
             Integer floor = set.floor(nums[i]); //next lower value O(log k) in treeset
            if(floor != null && nums[i] - (long)floor <= t){
                return true;
            }
        
            set.add(nums[i]);
            
            if(set.size() > k){ // size of set is always k and hence becomes a sliding window problem
                set.remove(nums[i-k]);
            }

        }
        return false;
    }
}
