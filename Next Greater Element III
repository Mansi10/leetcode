
class Solution {
    public int nextGreaterElement(int n) {
        char[] str = (n+"").toCharArray();
        int i = str.length-2;
        
        while(i >= 0 && str[i+1] <= str[i]){
            i--;
        }
        
        if(i < 0){
            return -1;
        }
        
        int j = str.length-1;
        while(j >= 0 && str[j] <= str[i]){
            j--;
        }
        
        swap(str, i, j);
        
        reverse(str, i+1);
        
        Long no = Long.parseLong(new String(str));
        
        if(no<=Integer.MAX_VALUE){
            return no.intValue();
        } else{
            return -1;
        }
        
    }
    
    public void reverse(char[] a, int start){
        int end = a.length-1;
        while(start < end){
            swap(a, start, end);
            start++;
            end--;
     }
    }
    
    public void swap(char[] str, int start, int end){
        char temp = str[start];
        str[start] = str[end];
        str[end] = temp;
    }
    
}

--------------------------------------------------------------

class Solution {
   public int nextGreaterElement(int n) {
       
       // 1. convert number to character array
        char[] str = (n+"").toCharArray();

        int deflectionPoint = str.length-1;

        while(deflectionPoint>0){
            if(str[deflectionPoint] > str[deflectionPoint-1]) {
                break;
            }
            deflectionPoint--;
        }
       
       // reached end of array , handles 11111 and 54321
        if(deflectionPoint == 0){
            return -1;
        }

        int firstSwappingIndex = deflectionPoint -1;
       
// 2. start traversing from end and find a number greater than the number at deflection point, swap them
        int secondSwappingIndex = str.length -1;
        while(secondSwappingIndex>=firstSwappingIndex){
            if(str[firstSwappingIndex] < str[secondSwappingIndex]) {
                break;
            }
            secondSwappingIndex--;
        }

        // swap

        char temp = str[firstSwappingIndex];
        str[firstSwappingIndex] = str[secondSwappingIndex];
        str[secondSwappingIndex] = temp;

        // reverse at the point of deflection

        reverseChar(str, deflectionPoint);
        Long no = Long.parseLong(new String(str));
        if(no<=Integer.MAX_VALUE){
            return no.intValue();
        } else{
            return -1;
        }

    }

    private void reverseChar(char[] str, int i){
        int start = i;
        int end =str.length-1;
        while(end>=start){
            char temp = str[start];
            str[start] = str[end];
            str[end] = temp;
            end--;
            start++;

        }
    }

}




