class Solution {
    public int minMeetingRooms(int[][] intervals) {
        
        if(intervals == null || intervals.length ==0){
            return 0;
        }
        
        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
        
        PriorityQueue<Integer> heap= new PriorityQueue<>();
        
        heap.add(intervals[0][1]);
        
        for(int i=1; i< intervals.length; i++){
            if(intervals[i][0] >= heap.peek())
                heap.poll();
            heap.add(intervals[i][1]);
        }
        return heap.size();
    }
}


-------------------------------------------------------------

class Solution {
    public int minMeetingRooms(int[][] intervals) {
            
    Arrays.sort(intervals, (a,b)->a[0] - b[0]);
    
    PriorityQueue<int[]> minheap=new PriorityQueue<>( (a,b)->a[1]- b[1]);
        
    minheap.add(intervals[0]);

    for (int i=1; i<intervals.length; i++)
    {
        int[] curr=intervals[i]; 
        int[] earliestEnding=minheap.remove();
        
        //NO Overlap: If curr start >= prev then it can be fit into same room
        if (curr[0]>=earliestEnding[1]){
            //Merge curr end time to earliestEnding to fit timeslot for same room
            earliestEnding[1]=curr[1]; 
        }
        else{
             //Overlap, so add curr to heap, 'cuz we need new room
            minheap.add(curr);          
        }
        //Add previous node (earliestEnding) back to heap, making sure that heap is sorted by ending times
        minheap.add(earliestEnding);       
    }
    return minheap.size();
}
}



------------------------------------------------------------

       public int minMeetingRooms(Interval[] intervals) {
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];

        for(int i=0; i<intervals.length; i++) {
            starts[i] = intervals[i].start;
            ends[i] = intervals[i].end;
        }

        Arrays.sort(starts);
        Arrays.sort(ends);

        int rooms = 0;
        int endsItr = 0;

        for(int i=0; i<starts.length; i++) {
            if(starts[i]<ends[endsItr]) {
                rooms++;
            } else {
                endsItr++;
            }
        }

        return rooms;
    }
    
    
    

    
