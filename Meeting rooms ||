class Solution {
    public int minMeetingRooms(int[][] intervals) {
        
        if(intervals == null || intervals.length ==0){
            return 0;
        }
        
        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
        
        PriorityQueue<Integer> heap= new PriorityQueue<>();
        
        heap.add(intervals[0][1]);
        
        for(int i=1; i< intervals.length; i++){
            if(intervals[i][0] >= heap.peek())
                heap.poll();
            heap.add(intervals[i][1]);
        }
        return heap.size();
    }
}


-------------------------------------------------------------


       public int minMeetingRooms(Interval[] intervals) {
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];

        for(int i=0; i<intervals.length; i++) {
            starts[i] = intervals[i].start;
            ends[i] = intervals[i].end;
        }

        Arrays.sort(starts);
        Arrays.sort(ends);

        int rooms = 0;
        int endsItr = 0;

        for(int i=0; i<starts.length; i++) {
            if(starts[i]<ends[endsItr]) {
                rooms++;
            } else {
                endsItr++;
            }
        }

        return rooms;
    }
    
    
    

    
