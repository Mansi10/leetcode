/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root == null)
            return false;
        else if(isSameTree(root, subRoot))
            return true;
        else{
            return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
        }
    }
    
    public boolean isSameTree(TreeNode r, TreeNode s){
        if(r == null || s == null)
            return r == null && s == null;
        else if(r.val == s.val)
            return isSameTree(r.left, s.left) && isSameTree(r.right, s.right);
        else{
            return false;
        }
    }

}

------------------------------------------------

public boolean isSubtree(TreeNode s, TreeNode t) {
	Queue<TreeNode> q = new LinkedList<>();
	q.offer(s);
	while (!q.isEmpty()) {
		TreeNode node = q.poll();
		if (isSame(node, t))
			return true;
		if (node.left != null)
			q.offer(node.left);
		if (node.right != null)
			q.offer(node.right);
	}
	return false;
}









