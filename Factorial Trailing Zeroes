// brute force

import java.math.BigInteger;

public int trailingZeroes(int n) {
    
    // Calculate n!
    BigInteger nFactorial = BigInteger.ONE;
    for (int i = 2; i <= n; i++) {
        nFactorial = nFactorial.multiply(BigInteger.valueOf(i));
    }
                    
    // Count how many 0's are on the end.
    int zeroCount = 0;
    
    while (nFactorial.mod(BigInteger.TEN).equals(BigInteger.ZERO)) {
        nFactorial = nFactorial.divide(BigInteger.TEN);
        zeroCount++;
    }
    
    return zeroCount;
}

--------------
// optimized

class Solution {
    public int trailingZeroes(int n) {
        int zeroCount = 0;
        
        long currentMultiple = 5;
        
        while(n >= currentMultiple){
            zeroCount += (n/currentMultiple);
            currentMultiple = currentMultiple*5;
        }
        
        
        return zeroCount;
    }
}
