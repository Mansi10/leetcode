// TC - O(rows+ cols)
// SC -O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length - 1;
        int cols = 0;
        
        while(cols < matrix[0].length && rows >= 0){
            if(matrix[rows][cols] > target){
                rows--;
            }
            else if(matrix[rows][cols] < target){
                cols++;
            }
            else{
                return true;
            }
            
        }
        
        return false;
    }
}

---------------------
// TC - O(rows + log cols)
// SC- O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        boolean result = false;
        
       for(int i=0; i< rows; i++){
           if(matrix[i][0] <= target){
               result = binarySearch(matrix[i], target);
           }
       }
        return result;
        
    }
    
    private boolean binarySearch(int[] arr, int target){
        
        int low = 0,high=arr.length-1;
    
        while(low<=high)
        {
            int mid = low + (high-low)/2;

            if(arr[mid]==target)
            {
                return true;
            }

            else if(arr[mid]<target)
            {
                low = mid +1;
            }
            else if(arr[mid]>target)
            {
                high = mid - 1;
            }
        }
        return false;
        
    }
    
}

