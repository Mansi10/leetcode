// brute force 

public class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        int length = heights.length;
        for (int i = 0; i < length; i++) {
            int minHeight = Integer.MAX_VALUE;
            for (int j = i; j < length; j++) {
                minHeight = Math.min(minHeight, heights[j]);
                maxArea = Math.max(maxArea, minHeight * (j - i + 1));
            }
        }
        return maxArea;
    }
}

-----------------------------------------------------------

class Solution {
    public int largestRectangleArea(int[] heights) {
        // to store indices 
        Stack<Integer> stack = new Stack<>();
        
        int maxArea=0;
        
        int length = heights.length;
        int[] left = new int[length];
        Arrays.fill(left, -1);
        
        int[] right = new int[length];
        Arrays.fill(right, length);
        
        // 1. to calculate right indices of each histogram to which it can be stretched
        for(int i=0; i< length; i++){
            while(!stack.isEmpty() && heights[stack.peek()] > heights[i]){
                right[stack.pop()] = i;
            }
            stack.push(i);
        }
        
        stack.empty();
        
        // 2. to calculate left indices
        for(int i = length-1; i >= 0; i--){
            while(!stack.isEmpty() && heights[stack.peek()] > heights[i]){
                left[stack.pop()] = i;
            }
            stack.push(i);
        }
        
        // 3. to calculate area of histogram
        for(int i=0; i< length; i++){
            maxArea= Math.max((right[i] - left[i] - 1) * heights[i], maxArea);
        }
        
        return maxArea;
    }
}
