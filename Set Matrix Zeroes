class Solution {
  public void setZeroes(int[][] matrix) {
    int R = matrix.length;
    int C = matrix[0].length;
    Set<Integer> rows = new HashSet<Integer>();
    Set<Integer> cols = new HashSet<Integer>();

    // Essentially, we mark the rows and columns that are to be made zero
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (matrix[i][j] == 0) {
          rows.add(i);
          cols.add(j);
        }
      }
    }

    // Iterate over the array once again and using the rows and cols sets, update the elements.
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (rows.contains(i) || cols.contains(j)) {
          matrix[i][j] = 0;
        }
      }
    }
  }
}

------------------------------------------------------------------------



    class Solution {
    public void setZeroes(int[][] matrix) {
        int col0 = 1, rows = matrix.length, cols = matrix[0].length;

        for (int i = 0; i < rows; i++) {
            // check in 0th column if any cell = 0, mark it
            if (matrix[i][0] == 0){
                col0 = 0;
            }
            
            for (int j = 1; j < cols; j++)
                // if value is 0, then mark the topmost and leftmost cell as 0
                if (matrix[i][j] == 0){
                    matrix[i][0] = matrix[0][j] = 0;
                }
        }

         // start traversing from right, if the topmpst and leftmost cell is zero, then mark that cell as zero
        for (int i = rows - 1; i >= 0; i--) {
            for (int j = cols - 1; j >= 1; j--)
                if (matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            // if the variable is set, then it means that 0th column has cell with value 0, mark it that cell as 0
            if (col0 == 0) {
                matrix[i][0] = 0;
            }
        }
    }
}


