class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        findCombinations(k, n, 1, result, new ArrayList<>());
        return result;
    }
    
    public void findCombinations(int noOfElements, int targetSum, int startValue, List<List<Integer>> result, List<Integer> ans){
        if(noOfElements == 0 && targetSum == 0){
                result.add(new ArrayList<>(ans));
                return;
        }
        
        if(targetSum < 0){
            return;
        }
        
        for(int i=startValue; i <= 9; i++){
            ans.add(i);
            findCombinations(noOfElements-1, targetSum - i, i+1, result, ans);
            ans.remove(ans.size()-1);
        }
    }
    
}


------------------------------------



class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans=new ArrayList<>();
        if(n==0) return ans;
        
        dfs(k,n,new ArrayList<>(),1,ans);
        return ans;
    }
    
    public void dfs(int k, int n, List<Integer> temp, int start, List<List<Integer>> ans){
        if(n==0 && temp.size()==k){
            ans.add(new ArrayList<>(temp));
            return;
        }
        if(n<0) 
            return;
        
        for(int i=start;i<=9;i++){
            temp.add(i);
            dfs(k,n-i,temp,i+1,ans);
            temp.remove(temp.size()-1);
        }
    }
}

