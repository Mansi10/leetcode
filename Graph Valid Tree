Approach 1: DFS and Graph Theory

class Solution {
    public boolean validTree(int n, int[][] edges) {
//  if the graph is fully connected and contains exactly n - 1 edges, it can't possibly contain a cycle, and therefore must be a tree!
// our algorithm needs to do the following:

// Check whether or not there are n - 1 edges. If there's not, then return false.
// Check whether or not the graph is fully connected. Return true if it is, false if otherwise.
    
        if(edges.length != n-1){
            return false;
        }
        
        List<List<Integer>> adjList = new ArrayList<>();
        
        for(int i=0; i < n; i++){
            adjList.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> seen = new HashSet<>();
        queue.offer(0);
        seen.add(0);
        
        while(!queue.isEmpty()){
            int node = queue.poll();
            
            for(int neighbour: adjList.get(node)){
                if(seen.contains(neighbour))
                    continue;
                
                seen.add(neighbour);
                queue.offer(neighbour);
            }
        }
        
        return seen.size() == n;
    }
}

-------------------------------------------

Approach 2: DSU


class Solution {
    
    private int find(int[] representative, int vertex){
        if(vertex == representative[vertex]){
            return vertex;
        }
        return representative[vertex] = find(representative, representative[vertex]);
    }
    
    private boolean combine(int[] representative, int[] size, int vertex1, int vertex2){
        vertex1 = find(representative, vertex1);
        vertex2 = find(representative, vertex2);
        
        if(vertex1 == vertex2){
            return false;
        }
        else{
            if(size[vertex1] > size[vertex2]){
                size[vertex1] += size[vertex2];
                representative[vertex2] = vertex1;
            }
            else{
                size[vertex2] += size[vertex1];
                representative[vertex1] = vertex2;
            }
            return true;
        }
    }
    
    public boolean validTree(int n, int[][] edges) {

        // Condition 1: The graph must contain n - 1 edges.
        if(edges.length != n-1){
            return false;
        }
        
        int[] representative = new int[n];
        int[] size = new int[n];
        
         // Condition 2: The graph must contain a single connected component.
        // Create a new UnionFind object with n nodes. 
        for(int i=0; i<n; i++){
            representative[i] = i;
            size[i] = 1;
        }
        
        // Add each edge. Check if a merge happened, because if it 
        // didn't, there must be a cycle.
        for(int[] edge: edges){
            int A = edge[0];
            int B = edge[1];
            
            if(!combine(representative, size, A, B)){
                return false;
            }
        }
        return true;
    }
    
}




