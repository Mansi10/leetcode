
class Solution {
    //TC: O(n2)
    // SC : O(n)
  public int lengthOfLIS(int[] nums) {
    if (nums == null || nums.length == 0) {
      return 0;
    }
    int[] dp = new int[nums.length];
    int max = 1;
    for (int i = 0; i < nums.length; i++) {
      dp[i] = 1;
      for (int j = 0; j < i; j++) {
        if (nums[j] < nums[i]) {
          dp[i] = Math.max(dp[i], dp[j] + 1);
          max = Math.max(dp[i], max);
        }
      }
    }
    return max;
  }

-----------------------------------


class Solution {
    public int lengthOfLIS(int[] nums) {
        TreeSet<Integer> bst = new TreeSet<>();
        
        for(int num : nums){
            // check if higher element is present in set than the current number
            Integer higherOrEqual = bst.ceiling(num);
            
            if(higherOrEqual == null){
                // if null, then add teh number in set
                bst.add(num);
            }
            else{
                // if higher value exists in set, remove this value and add the number
                bst.remove(higherOrEqual);
                bst.add(num);
            }
        }
        
        return bst.size();
    }
}
