public class NumberOfIslands {
    char[][] gridCopy;
    
    public int numIslands(char[][] grid) {
        //set grid copy to the current grid
        gridCopy = grid;
        
        //initialize number of islands to zero
        int numberOfIslands = 0;
        
        //iterate through every index of the grid
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                //attempt to "sink" the current index of the grid
                numberOfIslands += sink(gridCopy, i, j);
            }
        }
        
        //return the total number of islands
        return numberOfIslands;
    }
    
    int sink(char[][] grid, int i, int j) {
        //check the bounds of i and j and if the current index is an island or not (1 or 0)
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0') {
            return 0;
        }
        
        //set current index to 0
        grid[i][j] = '0';
        
        // sink all neighbors of current index
        sink(grid, i + 1, j);
        sink(grid, i - 1, j);
        sink(grid, i, j + 1);
        sink(grid, i, j - 1);
        
       return 1;
       }
       
       ---------------------------------------
       
       class Solution {
    public int numIslands(char[][] grid) {
        
        if(grid == null || grid.length == 0)
            return 0;
        
        int numberOfIslands=0;
        for(int i=0; i< grid.length; i++){
            for(int j=0; j<grid[i].length; j++){
                if(grid[i][j] == '1'){
                    numberOfIslands+= dfs(grid, i, j);
                }
            }
        }
        return numberOfIslands;
    }
    
    public int dfs(char[][] grid, int i, int j){
        if(i < 0 || i >= grid.length || j < 0 || j>= grid[i].length || grid[i][j] == '0'){
            return 0;
        }
        
        //set the element as visited
        grid[i][j]= '0';
        
        dfs(grid, i-1, j);
        dfs(grid, i+1, j);
        dfs(grid, i, j-1);
        dfs(grid, i, j+1);
        
        return 1;
        
    }
    
}

--------------------

public int numIslands(char[][] grid) {
  if (grid == null || grid.length == 0) {
    return 0;
  }
  int m = grid.length;
  int n = grid[0].length;
  boolean[][] marked = new boolean[m][n]; // or visit by setting value as '0'
  int[][] direction = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
  int islandCount = 0;
  for (int i = 0; i < m; ++i) {
    for (int j = 0; j < n; ++j) {
      if (!marked[i][j] && grid[i][j] == '1') {
        dfs(i, j, grid, marked, direction);
        ++islandCount;
      }
    }
  }
  return islandCount;
}

private void dfs(int i, int j, char[][] grid, boolean[][] marked, int[][] direction) {
  int m = grid.length;
  int n = grid[0].length;
  marked[i][j] = true; // visit;
  for (int[] dir : direction) {
    int x = i + dir[0];
    int y = j + dir[1];
    if (x >= 0 && x < m && y >= 0 && y < n) {
      if (!marked[x][y] && grid[x][y] == '1') {
        dfs(x, y, grid, marked, direction);
      }
    }
  }
}


-----------------------------

public int numIslands(char[][] grid) {
  if (grid == null || grid.length == 0) {
    return 0;
  }
  int m = grid.length;
  int n = grid[0].length;
  boolean[][] marked = new boolean[m][n]; // or visit by setting value as '0'
  int[][] direction = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
  int islandCount = 0;
  for (int i = 0; i < m; ++i) {
    for (int j = 0; j < n; ++j) {
      if (!marked[i][j] && grid[i][j] == '1') {
        bfs(i, j, grid, marked, direction);
        ++islandCount;
      }
    }
  }
  return islandCount;
}

private void bfs(int i, int j, char[][] grid, boolean[][] marked, int[][] direction) {
  int m = grid.length;
  int n = grid[0].length;
  Queue<int[]> queue = new LinkedList<>();
  queue.offer(new int[] { i, j });
  marked[i][j] = true;
  // bfs
  while (queue.size() > 0) {
    int[] curr = queue.poll();
    for (int[] dir : direction) {
      int x = curr[0] + dir[0];
      int y = curr[1] + dir[1];
      if (x >= 0 && x < m && y >= 0 && y < n) {
        if (!marked[x][y] && grid[x][y] == '1') {
          queue.offer(new int[] { x, y });
          marked[x][y] = true; // mark when enqueued
        }
      }
    }
  }
}








    
        
        
