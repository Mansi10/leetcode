
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        List<Integer> vals= new ArrayList<>();
        
        ListNode currentNode = head;
        while(currentNode != null){
            vals.add(currentNode.val);
            currentNode = currentNode.next;
        }
        
        List<Integer> reverseVals= new ArrayList<>();
        
        for(int i=vals.size()-1; i>=0; i--){
            reverseVals.add(vals.get(i));
        }
        
        for(int i = 0; i< vals.size(); i++){
            if(vals.get(i) != reverseVals.get(i)){
                return false;
            }
        }
        return true;
    }
}

-----------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        
    if(head == null)
        return true;
        
    ListNode firstHalfEnd= endOfFirstHalf(head);
    ListNode secondHalfStart= reverseList(firstHalfEnd.next);
    
    ListNode p1=head;
    ListNode p2= secondHalfStart;
    boolean result=true;
        
    while(result && p2 != null){
        if(p1.val != p2.val)
            result=false;
        p1 = p1.next;
        p2 = p2.next;
    }
        firstHalfEnd.next = reverseList(secondHalfStart);
        return result;
    }
    
    private ListNode reverseList(ListNode head){
        ListNode prev= null;
        ListNode curr = head;
        while(curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
    
    private ListNode endOfFirstHalf(ListNode head){
        ListNode fast=head;
        ListNode slow= head;
        
        while(fast.next != null && fast.next.next != null){
            slow= slow.next;
            fast= fast.next.next;
        }
         return slow;
    }
}



-----------------



class Solution 
{
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        ListNode pre = head;
        
		//break list in two parts
        while(fast != null && fast.next != null){
            pre = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // pre.next = null;
        ListNode h1 = head;
		//reverse the 2nd part
        ListNode h2 = reverse(slow);
		//compare and return
        return isPalindrome(h1,h2);
    }
    
    private ListNode reverse(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        return prev;
            
    }
    
    private boolean isPalindrome(ListNode l1, ListNode l2){
        while(l1 != null && l2 != null){
            if(l1.val != l2.val){
                return false;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        
        return true;
    }
}


