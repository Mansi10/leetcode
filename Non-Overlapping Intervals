class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if(intervals.length < 2) return 0;
        Arrays.sort(intervals, (a, b)->(a[0] - b[0]));
        int count = 0, last_included = 0;
        for(int i = 1; i < intervals.length; ++i){
            if(intervals[i][0] < intervals[last_included][1]){ // Overlap
                count++;
                if(intervals[i][1] < intervals[last_included][1]) last_included = i;
            } else 
                last_included = i;
        }
        return count;
    }
}

// sc-o(1)
//tc-o(n log n + n)


-----------------------------------

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        
        int count = 0;
		if (intervals.length == 0) {
			return count;
		}

		Arrays.sort(intervals, (a,b) -> (a[0] - b[0]));
        
		count = 0;
		int end = intervals[0][1];

		for (int i = 1; i < intervals.length; i++) {
			if(intervals[i][0] < end) {
				end = Math.min(end, intervals[i][1]);
				count++;
			} else {
				end = intervals[i][1];
			}		
        }

		return count;
    }
}




--------------

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int count =0;
        
        if(intervals.length == 0){
            return count;
        }
        
        Arrays.sort(intervals, (a,b) -> a[1]- b[1]);
        
       int end = intervals[0][1];
        
        for(int i=1; i< intervals.length; i++){
            if(intervals[i][0] < end){
                count++;
            }
            else{
                end = intervals[i][1];
            }
        }
        
        return count;
        
    }
}


