class WordDictionary {
    
    class TrieNode{
        private TrieNode[] links;
        private final int R = 26;
        private boolean isEnd;
        
        public TrieNode(){
            links = new TrieNode[R];
        }
        
    }

    private TrieNode root;
    
    public WordDictionary() {
        root = new TrieNode();
    }
    
    public void addWord(String word) {
        TrieNode node= root;
        for(int i=0; i<word.length(); i++){
            char ch= word.charAt(i);
            int index= ch-'a';
            if(node.links[index] == null){
                TrieNode newNode= new TrieNode();
                node.links[index] = newNode;
            }
            node= node.links[index];
        }
        node.isEnd= true;
    }
    
    public boolean search(String word) {
        return searchHelper(word, 0, root);
    }
    
private boolean searchHelper(String word, int sIndex, TrieNode root){
        if(word.length()==sIndex){
            return root.isEnd;
        }

        char c = word.charAt(sIndex);
        if(c=='.'){
            for(int i=0;i<26;i++){
                if(root.links[i]!=null && searchHelper(word, sIndex+1, root.links[i])){
                    return true;
                }
            }

        } else {
            int index = c -'a';
            if(root.links[index]!=null && searchHelper(word, sIndex+1, root.links[index])){
                return true;
            }
        }
        return false;
    }
}
/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
