
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int res=0;
        
        for(int i=0; i<s.length(); i++){
            for(int j=i; j< s.length(); j++){
                if(check(s, i,j)){
                    res=Math.max(res, j-i+1);
                }
            }
        }
        return res;
    }
    
    boolean check(String s, int start, int end){
        int[] chars= new int[128];
        
        for(int i=start; i<=end; i++){
            char c = s.charAt(i);
            chars[c]++;
            
            if(chars[c] >1){
                return false;
            }
        }
        return true;
    }
}

-----------------------------------------------------------

class Solution {
    public int lengthOfLongestSubstring(String s) {
     
        int[] chars= new int[128];
        
        int left=0;
        int right=0;
        
        int res=0;
        
        while(right < s.length()){
            char r= s.charAt(right);
            chars[r]++;
            
            if(chars[r] >1){
                char l= s.charAt(left);
                chars[l]--;
                left++;
            }
            
            res= Math.max(res, right-left +1);
            right++;
        }
        
        return res;
    }
}


--------------------------------------

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int result=0;
        int left=0; 
        int right=0;
        
        Set<Character> seen = new HashSet();
        
        while(right < s.length()){
            
            if(!seen.contains(s.charAt(right))){
                seen.add(s.charAt(right));
                result= Math.max(result, seen.size());
                right++;
            }
            else{
                seen.remove(s.charAt(left));
                left++;
            }
        }
        return result;
    }
}






